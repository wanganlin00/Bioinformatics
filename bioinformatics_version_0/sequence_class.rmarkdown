# 数据结构

<https://bioconductor.org/packages/release/workflows/html/sequencing.html>

![](images/sequence.png){fig-align="center"}

## S4 类

### DataFrame


```{r}
library(S4Vectors)

# 创建一个 DataFrame 对象
df <- DataFrame(a = 1:3, b = letters[1:3])
print(df)
```


### List


```{r}
# 创建一个 List 对象
lst <- List(a = 1:5, b = letters[1:3])
print(lst)
```


### Rle

**Run-Length Encoding (RLE)** 是一种简单且常用的数据压缩方法，特别适用于存储和处理重复数据序列。


```{r}
# 创建一个 Rle 对象
rle_obj <- Rle(c(rep("A", 5), rep("B", 3), rep("C", 2), "D", rep("A", 2)))

print(rle_obj)
```


在 RLE 中，连续的重复元素（称为“运行”）被压缩成一个值和一个计数对。这个值表示重复的元素，计数表示它们的数量。例如，序列 `[AAAAABBBCCDAA]` 可以被编码为 `(A5, B3, C2, D1, A2)`。

## Ranges

### `IRanges`


```{r}
set.seed(10)
ranges <- IRanges::IRanges(
  start = round(runif(10, 1, 100)),
  width = round(runif(10, 0, 50)),
  names = paste0("exton_", letters[sample(1:26, 10)])
)
ranges

ranges@NAMES
```


### **`GRanges`**

**`GRanges`**：用于表示基因组范围的数据结构，支持高效的基因组区域操作。


```{r}
library(GenomicRanges)
# help("GRanges-class")

set.seed(10)
Granges <- GRanges(
  seqnames = Rle( values =  c('chr1', 'chr2', 'chr3'), lengths =  c(3, 3, 4)),
  ranges = ranges,
  strand = c(rep("+",8),"-","*"),
  score = 101:110,
  GC = runif(10)
)
Granges
Granges@ranges


gr1 <- GRanges(seqnames = "chr1", ranges = IRanges(start = c(1, 20), end = c(10, 30)))
gr2 <- GRanges(seqnames = "chr1", ranges = IRanges(start = c(5, 25), end = c(15, 35)))
gr1
gr2
GenomicRanges::setdiff(gr1, gr2)
```


## `Biostrings`

`DNAstringSet`、`RNAStringSet`、`AAStringSet`、`BStringSet`


```{r}
# BiocManager::install("Biostrings") 
library(Biostrings) 

d <- DNAString("TTGAAAA-CTC-NACGT-")
d
length(d)
r <- RNAStringSet(c("AUCG", "GCAU", "AUCGAU", "GCUA"))
r
```

```{r}

protein_strings <- AAStringSet(c("MATH", "GCAU", "MATHMATH", "CUMA"))
protein_strings

# 二进制字符串存储 如seq_id、quality
binary_strings <- BStringSet(c("ERCC010101", "CRCC110011", "101010", "111000"))
binary_strings
```


从 Ensembl 的FASTA文件'Homo_sapiens.GRCh38.cdna.all.fa'中下载所有智人cDNA序列


```{r}
library(AnnotationHub)
proxy <- httr::use_proxy(Sys.getenv('http_proxy'))
httr::set_config(proxy)
AnnotationHub::setAnnotationHubOption("PROXY", proxy)

ah <- AnnotationHub()
ah
ah2 <- query(ah, c("fasta", "homo sapiens", "Ensembl", "cdna"))
ah2

# 下载为TwoBitFile文件
dna <- ah2[["AH68262"]]
dna

Biostrings::getSeq(dna)
```


## BSgenome

从UCSC hg38中加载智人的全基因组序列，计算14号染色体GC含量


```{r}
library(BSgenome.Hsapiens.UCSC.hg38)
chr14_range = GRanges("chr14", IRanges(1, seqlengths(Hsapiens)["chr14"]))
chr14_dna <- getSeq(Hsapiens, chr14_range)
letterFrequency(chr14_dna, "GC", as.prob=TRUE)
```


## 测序文件

### FASTQ 文件


```{r eval=FALSE}
## 1. attach ShortRead and BiocParallel
library(ShortRead)
library(BiocParallel)

## 2. create a vector of file paths
fls <- dir("~/fastq", pattern="*fastq", full=TRUE)

## 3. collect statistics
stats0 <- qa(fls)

## 4. generate and browse the report
if (interactive())
    browseURL(report(stats0))
```


### BAM 文件

Binary alignment 二进制对齐

[`GenomicAlignments`](https://bioconductor.org/packages/3.19/bioc/html/GenomicAlignments.html)

### VCF 文件

`VariantAnnotation` `readVcf()`

### BED、WIG、GTF 等注释文件

[rtracklayer](https://bioconductor.org/packages/3.19/bioc/html/rtracklayer.html) `impart()`

